[tox]
envlist =
    checkmetadata,
    pylint,
    py{27, 36, 37, 38, 39},
    docs


[testenv:docs]
deps =
    recommonmark
    sphinx
    sphinx_rtd_theme

setenv =
    GH_PAGES_DIR = build/docs

allowlist_externals =
    echo
    touch

commands =
    python -m sphinx -n -a -E -W doc "{env:GH_PAGES_DIR}"
    touch {env:GH_PAGES_DIR}/.nojekyll
    echo "View generated documentation at: "
    echo "    file://{toxinidir}/{env:GH_PAGES_DIR}/index.html"

[testenv:checkmetadata]
deps =
    check-manifest
    twine

commands =
    check-manifest -v
    twine check --strict {distdir}/*


[testenv:pylint]
deps =
    pylint

commands =
    pylint setup.py src/ tests/

[testenv:py{27, 36, 37, 38, 39}]
commands_pre =
    {toxinidir}/scripts/ensure-sqlserver.sh ctds-unittest-sqlserver

skip_install = true

deps =
    coverage
    pytest
    pytest-cov
    py27: mock

allowlist_externals =
    bash
    docker
    echo
    gcov
    mkdir
    mv

setenv =
    HOSTNAME = ctds-unittest-sqlserver
    CTDS_COVER=1
    CTDS_STRICT=1

passenv = CTDS_* PYTEST_*

commands =
    # Install the ctds egg manually so the output objects are written
    # to a known location which enables coverage collection via gcov.
    python setup.py \
            -v \
        build \
            --force \
            --build-base build/{envname} \
        install \
            --force
    pytest \
            --cov=src \
            --no-cov-on-fail \
            --cov-branch \
            --cov-report=xml:build/{envname}/coverage/coverage.xml \
            --cov-report=term-missing \
        tests/

    # Process the native c coverage files. bash is used for glob support.
    bash -c ' \
        for OBJDIR in build/{envname}/*/src/ctds; do :; done && \
        gcov -b -o $OBJDIR src/ctds/*.c && \
        mv *.gcov build/{envname}/coverage/ \
    '
    coverage erase
